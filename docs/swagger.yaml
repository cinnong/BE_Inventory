basePath: /api
definitions:
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      role:
        enum:
        - admin
        - user
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
host: localhost:3000
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: API untuk sistem manajemen inventory dengan authentication JWT
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Inventory Management API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login dengan email dan password, return JWT token
      parameters:
      - description: Data login
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login berhasil
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Login user
      tags:
      - Authentication
  /auth/profile:
    get:
      description: Mendapatkan data profile user yang sedang login
      produces:
      - application/json
      responses:
        "200":
          description: Profile berhasil diambil
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Unauthorized
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User tidak ditemukan
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Get user profile
      tags:
      - Authentication
  /auth/register:
    post:
      consumes:
      - application/json
      description: Mendaftarkan user baru dengan username, email, password, dan role
      parameters:
      - description: Data user baru
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User berhasil didaftarkan
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Register user baru
      tags:
      - Authentication
securityDefinitions:
  BearerAuth:
    description: 'JWT token dengan format: Bearer {token}'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
